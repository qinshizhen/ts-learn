{
    /*
      tsconfig.json是ts编译器的配置文件，ts可以根据它的信息来对待吗进行编译 可以再tsconfig中写注释
      include : 用来指定哪些文件需要被编译
      exclude : 用来指定哪些文件不需要被编译 ：默认node_module
      extends : 用来指定继承的配置文件
      files   : 用来指定被编译的文件列表，只有编译少量文件才使用
      compilerOptions : 编译器的选项是配置文件中非常重要也是非常复杂的配置选项
      */

    // 用来指定哪些ts文件需要被编译
    "include": [
        // ** : 任意目录 ， * : 任意文件
        "./src/**/*"
    ],

    // 不需要被编译的文件目录
    // 默认值 ["node_modules", "bower_components", "jspm_packages"]
    "exclude": [
        "./src/hello/**/*"
    ],

    // 继承
    // "extends": "./configs/base",

    // 需要编译的文件
    // "files": [
    //     // "1.ts",
    //     // "2.ts",
    // ],

    // 编译器选项 
    "compilerOptions": {
        // 用来指定 ES 版本。 默认 ES3
        // ESNext : 最新版。 
        // 'ES3', 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ESNext'
        "target": "ES2015",

        // 指定要使用模块化的规范 : 'None', 'CommonJS', 'AMD', 
        // 'System', 'UMD', 'ES6'/'ES2015', 'ES2020' or 'ESNext'
        "module": "ES2015",

        // 用来指定项目中要使用的库 
        // 'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 
        // 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 
        // 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy',
        //  'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object',
        //  'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 
        // 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 
        // 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string',
        //  'es2020.symbol.wellknown', 'es2020.intl', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'es2021.intl',
        //  'es2022.array', 'es2022.error', 'es2022.object', 'es2022.string', 'esnext.array', 'esnext.symbol', 
        // 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'
        // 运行在浏览器中不用设置，运行在node或其他中才需要设置
        //  "lib": [],

        // 用来指定编译后文件的存放位置
        "outDir": "./dist",

        // 将代码合并为一个文件,设置之后所有的全局作用域中的代码会合并到同一个文件中 但是只能在module为 'amd' and 'system' 中才能使用
        // "outFile": "./dist/app.js",

        // 所有的严格检查的总开关，默认false
        "strict": false,

        // 是否对js文件进行编译，默认false
        "allowJs": false,

        // 是否检查js代码是否符合语法规范，默认false
        "checkJs": false,

        // 是否移除注释，默认false
        "removeComments": false,

        // 是否不生成编译后文件，默认false
        "noEmit": false,

        // 当有错误时是否生成文件，默认false
        "noEmitOnError": false,

        // 是否生成sourceMap，默认false  这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。
        "sourceMap": false,

        // 编译后的文件是否开启严格模式，默认false
        "alwaysStrict": false,

        // 不允许隐式的any，默认false(允许)
        "noImplicitAny": false,

        // 不允许隐式的this，默认false(允许)
        "noImplicitThis": false,

        // 是否严格的检查空值，默认false 检查有可能为null的地方
        "strictNullChecks": true,

        // 是否严格检查bind、call和apply的参数列表，默认false  检查是否有多余参数
        "strictBindCallApply": false,

        // 是否严格检查函数的类型，
        "strictFunctionTypes": false,

        // 是否严格检查属性是否初始化，默认false
        "strictPropertyInitialization": false,

        // 是否检查switch语句包含正确的break，默认false
        "noFallthroughCasesInSwitch": false,

        // 检查函数没有隐式的返回值，默认false
        "noImplicitReturns": false,

        // 是否检查检查未使用的局部变量，默认false
        "noUnusedLocals": false,

        // 是否检查未使用的参数，默认false
        "noUnusedParameters": false,

        // 是否检查不可达代码报错，默认false   true，忽略不可达代码 false，不可达代码将引起错误
        "allowUnreachableCode": false
    }
}